name: management

services:
  traefik:
    restart: unless-stopped
    image: traefik:3.4.1
    command:
      - --accessLog.filePath=/data/access.log
      - --accessLog.format=json
      - --api.dashboard=true
      # the `acme-dns` resolver is used by default and is configured manually to obtain wildcard certs.
      - --certificatesResolvers.acme-dns.acme.storage=/data/acme-dns.json
      - --certificatesResolvers.acme-dns.acme.email=certs@sibr.dev
      - --certificatesResolvers.acme-dns.acme.dnsChallenge=true
      - --certificatesResolvers.acme-dns.acme.dnsChallenge.disablePropagationCheck=true
      - --certificatesResolvers.acme-dns.acme.dnsChallenge.provider=httpreq
      # the `acme-tls` resolver can instead be used where we don't have a wildcard cert configured.
      - --certificatesResolvers.acme-tls.acme.storage=/data/acme-tls.json
      - --certificatesResolvers.acme-tls.acme.email=certs@sibr.dev
      - --certificatesResolvers.acme-tls.acme.tlsChallenge=true
      - --entryPoints.http.address=:80
      - --entrypoints.http.http.redirections.entryPoint.scheme=https
      - --entrypoints.http.http.redirections.entryPoint.to=https
      - --entrypoints.https.address=:443
      - --entrypoints.https.http.middlewares=compression@docker,globalHeaders@docker
      - --entrypoints.https.http.tls=true
      - --entrypoints.https.http.tls.certResolver=acme-dns
      - --entrypoints.https.http.tls.domains[0].main=*.sibr.dev
      - --entrypoints.https.http.tls.domains[0].sans=sibr.dev
      - --entrypoints.https.http.tls.domains[1].main=*.sibr-03-hetzner.sibr.dev
      - --entrypoints.https.http.tls.domains[2].main=*.blaseball-reference.com
      - --entrypoints.https.http.tls.domains[2].sans=blaseball-reference.com
      - --entrypoints.metrics.address=:8082
      - --log.level=INFO
      - --metrics.prometheus.entryPoint=metrics
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=proxy
    environment:
      HTTPREQ_ENDPOINT: http://acme-dns
    networks:
      - acme-dns
      - proxy
    labels:
      traefik.enable: true
      traefik.http.middlewares.compression.compress: true
      traefik.http.middlewares.compression.compress.excludedContentTypes: text/event-stream
      traefik.http.middlewares.globalHeaders.headers.customResponseHeaders.Permissions-Policy: interest-cohort=()
      traefik.http.routers.traefik-api.entrypoints: https
      traefik.http.routers.traefik-api.middlewares: mgmt-auth@docker
      traefik.http.routers.traefik-api.rule: Host(`traefik.sibr-03-hetzner.sibr.dev`)
      traefik.http.routers.traefik-api.service: api@internal
    ports:
      - 80:80
      - 443:443
    volumes:
      - /srv/docker/management/traefik_data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - acme-dns
    mem_limit: 1g

  # This service is a hack to allow reloading mgmt.htpasswd without bouncing
  # Traefik; restarting this container will reconfigure the mgmt-auth
  # middleware, which will trigger a reload of the users file.
  auth-file-trigger:
    restart: unless-stopped
    image: ghcr.io/iliana/paws
    networks:
      - proxy
    labels:
      traefik.enable: true
      traefik.http.middlewares.mgmt-auth.basicAuth.realm: SIBR Management
      traefik.http.middlewares.mgmt-auth.basicAuth.usersFile: /data/mgmt.htpasswd
      traefik.http.routers.auth-file-trigger.entrypoints: metrics
      traefik.http.routers.auth-file-trigger.service: noop@internal
      traefik.http.services.auth-file-trigger.loadbalancer.server.port: 86
    mem_limit: 16m

  acme-dns:
    restart: unless-stopped
    image: ghcr.io/iliana/lego-httpreq-server
    command: [/lego-httpreq-server, --http-addr, "[::]:80"]
    networks:
      - acme-dns
    ports:
      - "53:53/tcp"
      - "53:53/udp"
    labels:
      com.centurylinklabs.watchtower.enable: true
    mem_limit: 16m

  watchtower:
    restart: unless-stopped
    image: ghcr.io/containrrr/watchtower:1.7.1
    command: --interval 120 --label-enable --cleanup
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    mem_limit: 64m

  whoami:
    restart: unless-stopped
    image: ghcr.io/traefik/whoami
    networks:
      - proxy
    labels:
      com.centurylinklabs.watchtower.enable: true
      traefik.enable: true
      traefik.http.routers.whoami.entrypoints: https
      traefik.http.routers.whoami.rule: Host(`whoami.sibr-03-hetzner.sibr.dev`)
    mem_limit: 16m

networks:
  acme-dns: {}
  proxy:
    name: proxy
