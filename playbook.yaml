---
- name: SIBR Server Setup
  hosts: localhost
  become: true
  become_method: sudo

  vars_files:
    etc/restic-vars.yaml
  vars:
    users:
      - name: dlareau
        admin: true
        faculty: true
      - name: emily
        admin: true
        faculty: true
      - name: iliana
        admin: true
        faculty: true
      # Keep this user defined until we have non-admin users to exercise various
      # non-admin branches.
      - name: mail
        shell: /usr/sbin/nologin
    packages:
      # https://packages.ubuntu.com/noble/ubuntu-cloud-minimal, but less
      - apparmor
      - console-setup
      - dbus
      - dmsetup
      - fdisk
      - microcode-initrd
      - openssh-server
      - parted
      - sudo
      - systemd-resolved
      - systemd-timesyncd
      - unattended-upgrades
      # you gotta boot somehow
      - grub-efi-amd64
      - grub-pc-bin
      - initramfs-tools
      - linux-image-generic
      # hetzner installimage delivers network configuration to /etc/netplan
      - netplan.io
      # docker docker docker
      - docker-ce
      - docker-ce-cli
      - docker-compose-plugin
      # other important packages not in the above lists
      - curl
      - dbus-user-session
      - efibootmgr
      - iproute2
      - iputils-ping
      - iputils-tracepath
      - less
      - locales
      - logrotate
      - man-db
      - manpages
      - nano
      - netcat-openbsd
      - psmisc
      - rsync
      - rsyslog
      - strace
      - tcpdump
      - tzdata
      - vim
      - wget
      # necessary to run the ansible playbook / scripts
      - apache2-utils
      - bzip2
      - git
      - jq
      - motd-news-config
      - openssh-client
      - pipx
      # hardware management
      - dmidecode
      - ethtool
      - hdparm
      - mdadm
      - nvme-cli
      - pciutils
      - smartmontools
      - usbutils
      # everything else
      - bash-completion
      - bind9-dnsutils
      - build-essential
      - htop
      - inetutils-telnet
      - kitty-terminfo
      - moreutils
      - ncdu
      - neovim
      - postgresql-client-16
      - pv
      - python3-pip
      - python3-psycopg2
      - python-wheel-common
      - rustup
      - screen
      - shellcheck
      - tmux
      - zstd

  handlers:
    - name: dpkg-reconfigure locales
      command: dpkg-reconfigure -f noninteractive locales
    - name: reload datablase
      command: docker kill --signal=SIGHUP datablase-db-1
    - name: reload ssh
      service: name=ssh state=reloaded
    - name: reload staticwww
      command: docker exec staticwww-nginx-1 nginx -s reload

  tasks:
    # Early system configuration.
    - name: Set hostname
      hostname:
        name: sibr-03-hetzner
        use: systemd
    - name: Set timezone to UTC
      community.general.timezone:
        name: UTC
        hwclock: UTC
    - name: Generate locales
      debconf:
        name: locales
        question: locales/locales_to_be_generated
        value: en_US.UTF-8 UTF-8
        vtype: multiselect
      notify: dpkg-reconfigure locales
    - name: Set default locale
      debconf:
        name: locales
        question: locales/default_environment_locale
        value: en_US.UTF-8
        vtype: select
      notify: dpkg-reconfigure locales
    - name: Use /run/systemd/resolve/resolv.conf as /etc/resolv.conf
      file:
        src: /run/systemd/resolve/resolv.conf
        dest: /etc/resolv.conf
        state: link
    - name: Create /etc/systemd/resolved.conf.d
      file:
        path: /etc/systemd/resolved.conf.d
        state: directory
    - name: Deploy /etc/systemd/resolved.conf.d/sibr.conf
      template:
        src: etc/resolved.conf
        dest: /etc/systemd/resolved.conf.d/sibr.conf
      register: resolved_conf
    - name: Restart systemd-resolved.service
      service: name=systemd-resolved state=restarted
      when: resolved_conf is changed
    - name: Deploy /etc/ssh/sshd_config
      template:
        src: etc/sshd_config
        dest: /etc/ssh/sshd_config
        validate: 'sshd -tf %s'
      notify: reload ssh
    - name: Deploy /etc/sudoers
      template:
        src: etc/sudoers
        dest: /etc/sudoers
        validate: 'visudo -cf %s'
    - name: Create home directories as 0755 by default
      lineinfile:
        path: /etc/adduser.conf
        regexp: ^#?DIR_MODE=
        line: DIR_MODE=0755
    - name: Disable resume support in initramfs
      lineinfile:
        path: /etc/initramfs-tools/initramfs.conf
        regexp: '^RESUME='
        line: RESUME=none

    # We describe all the packages we want the system to have in {{ packages }}.
    # After installing all of the packages, we compare the list to `apt-mark
    # showmanual` so that we can remove any unexpected packages. This helps to
    # ensure that there is no implicit state depending on something that was
    # installed by Hetzner that no longer is present.
    #
    # First, ensure that we generate a fact with the output of `apt-mark
    # showmanual`.
    - name: Create /etc/ansible/facts.d
      file:
        path: /etc/ansible/facts.d
        state: directory
    - name: Install custom `apt-mark showmanual` fact
      template:
        src: etc/manualpackages.fact.sh
        dest: /etc/ansible/facts.d/apt_manualpackages.fact
        mode: '0755'
      register: apt_manualpackages_fact
    # Add our apt configuration.
    - name: Install /etc/apt/apt.conf.d/99sibr
      template:
        src: etc/apt.conf
        dest: /etc/apt/apt.conf.d/99sibr
    - name: Ensure /etc/apt/sources.list.d/hetzner-mirror.sources is absent
      file:
        path: /etc/apt/sources.list.d/hetzner-mirror.sources
        state: absent
    - name: Install /etc/apt/sources.list.d/*.sources
      template:
        src: etc/{{ item }}
        dest: /etc/apt/sources.list.d/{{ item }}
      loop:
        - ubuntu.sources
        - docker.sources
      register: custom_apt_sources
    - name: Force refresh apt cache
      apt:
        update_cache: yes
      when: custom_apt_sources is changed
    # Install all the packages.
    - name: Install required packages
      apt:
        pkg: "{{ packages }}"
        update_cache: yes
        cache_valid_time: 86400
      register: apt_install
    - name: Re-read local facts
      setup:
        filter: ansible_local
      when: (apt_manualpackages_fact is changed) or (apt_install is changed)
    # Run `apt-mark manual` on everything in {{ packages }} that is not present
    # in {{ ansible_local['apt_manualpackages'] }}.
    - name: Run `apt-mark manual` on expected packages
      command:
        argv:
          - apt-mark
          - manual
          - "{{ item }}"
      loop: >-
        {{ packages | difference(ansible_local['apt_manualpackages']) | sort }}
    # Run `apt-mark auto` on everything in {{ ansible_local['apt_manualpackages'] }}
    # that is not present in {{ packages }}.
    - name: Run `apt-mark auto` on unexpected packages
      command:
        argv:
          - apt-mark
          - auto
          - "{{ item }}"
      loop: >-
        {{ ansible_local['apt_manualpackages'] | difference(packages) | sort }}
    # Dry-run `apt-get autoremove`, prompt if it would change, then actually do
    # the thing.
    - name: Check if autoremove would remove anything
      apt:
        autoremove: true
      check_mode: true
      diff: true
      register: apt_autoremove_dryrun
    - name: Prompt to allow autoremove
      pause:
        prompt: Do you want to run `apt-get autoremove` (dry-run above)? [yes/no]
      when: (not ansible_check_mode) and (apt_autoremove_dryrun is changed)
      register: autoremove_pause
    - name: apt-get autoremove
      apt:
        autoremove: true
      when: |
        (autoremove_pause is not skipped) and
        (autoremove_pause.user_input is truthy(convert_bool=true))

    # Install Ansible globally with pipx.
    - name: pipx install ansible
      community.general.pipx:
        name: ansible
        source: ansible==10.2.0
        system_site_packages: true
        executable: pipx
      environment:
        PIPX_HOME: /opt/pipx
        PIPX_BIN_DIR: /usr/local/bin
        PIPX_MAN_DIR: /usr/local/share/man
    - name: pipx inject ansible ansible-core
      community.general.pipx:
        name: ansible
        source: ansible==10.2.0
        state: inject
        inject_packages:
          - ansible-core==2.17.2
        install_apps: true
        executable: pipx
      environment:
        PIPX_HOME: /opt/pipx
        PIPX_BIN_DIR: /usr/local/bin
        PIPX_MAN_DIR: /usr/local/share/man
    # Download and install restic.
    - name: Download and install restic
      include_tasks: file=etc/install-restic.yaml

    # Post-install system configuration.
    - name: Deploy /etc/docker/daemon.json
      copy:
        src: etc/docker-daemon.json
        dest: /etc/docker/daemon.json
        validate: 'dockerd --validate --config-file=%s'
      register: docker_config
    - name: Reload Docker
      service: name=docker state=reloaded
      when: docker_config is changed
    - name: Disable MOTD news
      lineinfile:
        path: /etc/default/motd-news
        regexp: '^ENABLED='
        line: ENABLED=0
    - name: Deploy /etc/logrotate.d/sibr
      template:
        src: etc/logrotate.conf
        dest: /etc/logrotate.d/sibr

    # Users and groups.
    - name: Create users
      user:
        name: "{{ item.name }}"
        groups: "{{ item.admin | default | ternary(admin_groups, []) }}"
        append: true
        shell: "{{ item.shell | default('/bin/bash') }}"
      loop: "{{ users }}"
      vars:
        admin_groups:
          - docker
          - staff # used for setgid directories
          - sudo
          - systemd-journal
    - name: Ensure /root/.ssh/authorized_keys is absent
      file:
        path: /root/.ssh/authorized_keys
        state: absent

    # Compose stacks.
    - name: Create Compose stack directories (root-owned)
      file:
        path: "{{ item }}"
        state: directory
      loop:
        - /srv/docker/aeguir/data
        - /srv/docker/chron2/db
        - /srv/docker/chronicler/db
        - /srv/docker/chronicler/logs/api
        - /srv/docker/datablase/auth
        - /srv/docker/datablase/db
        - /srv/docker/eventually/db
        - /srv/docker/eventually/sachet_cache
        - /srv/docker/glolf/db
        - /srv/docker/glolfwiki/db
        - /srv/docker/glolfwiki/www
        - /srv/docker/management/traefik_data
        - /srv/docker/netdata/config/go.d
        - /srv/docker/netdata/identity
        - /srv/docker/netdata/metrics
        - /srv/docker/olareg/data
        - /srv/docker/staticwww
        - /srv/docker/teeny/rocks
        - /srv/docker/upnuts/db
    - name: Create Compose stack directories (setgid staff)
      file:
        path: "{{ item }}"
        state: directory
        group: staff
        mode: '2775'
      loop:
        - /srv/docker/postoffice
        - /srv/www/bricks.sibr.dev
        - /srv/www/etr.sibr.dev
        - /srv/www/faculty.sibr.dev
        - /srv/www/files.blaseball-reference.com
        - /srv/www/files.sibr.dev
        - /srv/www/jq.sibr.dev
        - /srv/www/snacks.sibr.dev
        - /srv/www/stacks.sibr.dev
        - /srv/www/stadium-viewer.sibr.dev
        - /srv/www/surveys.sibr.dev
    - name: Set up faculty web directories
      file:
        path: /srv/www/faculty.sibr.dev/~{{ item.name }}
        state: directory
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
        mode: '0755'
      loop: "{{ users | selectattr('faculty', 'true') }}"
    - name: Symlink faculty web directories
      file:
        src: /srv/www/faculty.sibr.dev/~{{ item.name }}
        dest: /home/{{ item.name }}/public_html
        state: link
        owner: "{{ item.name }}"
        group: "{{ item.name }}"
      loop: "{{ users | selectattr('faculty', 'true') }}"
    - name: Ensure /srv/docker/management/traefik_data/mgmt.htpasswd exists
      file:
        path: /srv/docker/management/traefik_data/mgmt.htpasswd
        owner: root
        group: root
        mode: '0600'
        state: touch
        access_time: preserve
        modification_time: preserve
    - name: Create /srv/docker/chron2/config.toml
      copy:
        content: |
          auth_cookie = "lol. lmao"
        dest: /srv/docker/chron2/config.toml
    - name: Netdata configuration
      template:
        src: etc/netdata/{{ item }}
        dest: /srv/docker/netdata/config/{{ item }}
      loop:
        - netdata.conf
        - go.d/traefik.conf
    - name: Generate random superuser password for Datablase
      copy:
        content: >
          {{ lookup("password", "/dev/null") }}
        dest: /srv/docker/datablase/auth/superuser
        force: false
        group: staff
        mode: '0640'
    - name: staticwww nginx configuration
      template:
        src: etc/staticwww/nginx.conf
        dest: /srv/docker/staticwww/nginx.conf
        validate: 'docker run --rm -v %s:/etc/nginx/nginx.conf:ro --entrypoint nginx nginx:1.26.2 -t'
      vars:
        extra_config:
          bricks.sibr.dev: |
            try_files $uri $uri.html =404;
            location = / {
              return 303 https://bricks.sibr.dev/batting/gamma10/0;
            }
          files.blaseball-reference.com: |
            add_header 'Access-Control-Allow-Origin' '*';
            add_header 'Access-Control-Allow-Methods' 'GET';
          research.blaseball-reference.com: |
            location = / {
              return 302 https://sibr.dev/research/;
            }
            location / {
              return 302 https://sibr.dev/papers/files$request_uri;
            }
          faculty.sibr.dev: autoindex on;
          files.sibr.dev: autoindex on;
          stacks.sibr.dev: autoindex on;
        redirects:
          blog.sibr.dev: https://sibr.dev/blog/
          discord.sibr.dev: https://discord.gg/UhAajY2NCW
          hloroscopes.sibr.dev: http://yoori.space/hloroscopes
          levels.sibr.dev: https://ubuntor.github.io/blaseball/imposition/
          oracle.sibr.dev: https://files.sibr.dev/oracle/oracle.jpg
          research.sibr.dev: https://sibr.dev/research/
          sclorigami.sibr.dev: https://docs.google.com/spreadsheets/d/1ITCtaZAXimgO7bjPaBeb3w_n9R20cEH07kIsSFJEj90/edit?usp=sharing
          simsim.sibr.dev: http://sim16.sakimori.space
      notify:
        - reload staticwww
    - name: Manage Compose stacks
      community.docker.docker_compose_v2:
        project_src: "{{ item }}"
        remove_orphans: true
      loop:
        - stacks/management
        - stacks/olareg
        - stacks/netdata
        - stacks/pgadmin

        - stacks/chronicler
        - stacks/chron2
        - stacks/datablase
        - stacks/eventually
        - stacks/replay
        - stacks/upnuts

        - stacks/aeguir
        - stacks/before
        - stacks/compendium
        - stacks/glolf
        - stacks/glolfwiki
        - stacks/json2csv
        - stacks/staticwww
        - stacks/teeny
        - stacks/telnet

    # Extra Datablase setup.
    - name: Deny Datablase superuser logins from the internet
      community.postgresql.postgresql_pg_hba:
        dest: /srv/docker/datablase/db/pg_hba.conf
        rules:
          - contype: host
            users: postgres
            address: 172.16.0.0/14
            method: md5
          - contype: host
            users: postgres
            address: all
            method: reject
      notify:
        - reload datablase
    - name: Create up Datablase guest user
      community.postgresql.postgresql_user:
        login_host: localhost
        login_port: 1019
        login_user: postgres
        login_password: '{{ lookup("file", "/srv/docker/datablase/auth/superuser") }}'
        db: "blaseball-2.14.8"
        name: guest
        password: md569e5a2417104b24c7fcc25a28ec4c1aa
    # Note that this probably doesn't work _after_ pg_restore. Not sure what to do about that.
    - name: Set default access for guest user
      community.postgresql.postgresql_privs:
        login_host: localhost
        login_port: 1019
        login_user: postgres
        login_password: '{{ lookup("file", "/srv/docker/datablase/auth/superuser") }}'
        db: "blaseball-2.14.8"
        schema: not-specified
        objs: '{{ item.objs }}'
        privs: '{{ item.privs }}'
        type: default_privs
        role: guest
      loop:
        - objs: SCHEMAS
          privs: USAGE
        - objs: TABLES,SEQUENCES
          privs: SELECT
        - objs: FUNCTIONS
          privs: EXECUTE

    # Backup script.
    - name: Deploy sibr-backup.service
      template:
        src: etc/sibr-backup.service
        dest: /etc/systemd/system/sibr-backup.service
      vars:
        backup_dirs:
          - /srv/docker/aeguir
          - /srv/docker/glolf
          - /srv/docker/glolfwiki/www
          - /srv/docker/management/traefik_data
          - /srv/docker/netdata/config
          - /srv/docker/netdata/identity
          - /srv/docker/olareg/data
          - /srv/docker/postoffice
          - /srv/docker/teeny
          - /srv/www
        restic_args:
          - --insecure-no-password
          - --option=sftp.args=-i /root/.ssh/restic_ed25519 -o ServerAliveInterval=60 -o ServerAliveCountMax=240
        forget_args:
          - --keep-within-hourly=8d
          - --keep-within-daily=1m
          - --keep-within-weekly=1y
          - --prune
      register: sibr_backup_service
    - name: Deploy sibr-backup.timer
      template:
        src: etc/sibr-backup.timer
        dest: /etc/systemd/system/sibr-backup.timer
      register: sibr_backup_timer
    - name: systemctl daemon-reload
      systemd_service:
        daemon_reload: true
      when: sibr_backup_service is changed or sibr_backup_timer is changed
    - name: Enable sibr-backup.timer
      systemd_service:
        name: sibr-backup.timer
        state: started
        enabled: true
